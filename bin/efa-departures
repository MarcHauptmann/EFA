#!/usr/bin/perl

use EFA;
use EFA::DB;
use EFA::Utils;
use POSIX;
use DateTime;
use Text::Table;
use Getopt::Long qw(:config pass_through);
use Pod::Usage;
use strict;
use warnings;
use utf8;

binmode(STDOUT, ":utf8");

main();

=pod

=encoding utf8

=head1 NAME

B<efa-departures> - Verwaltet die Abfahrten

=head1 SYNOPSIS

=over 8

=item I<efa-deparures clear>

=item I<efa-deparures fetch> <id>

=item I<efa-deparures list>

=item I<efa-deparures query> [OPTIONS] <id>

=back

=cut

# Hilfe anzeigen und beenden
sub show_help {
  pod2usage(verbose => 99,
            sections => [ qw(SYNOPSIS COMMANDS) ]);
}

# Zeigt Abfahrten in einer Tabelle an
sub show_departures {
  my $table = Text::Table->new("Wartezeit", "Abfahrtszeit", "Haltestelle", "Typ", "Linie", "Endstation");

  for my $line (@_) {
    $table->add($line->get_wait_str(),
                $line->get_time()->strftime("%H:%M"),
                $line->get_station()->get_name(),
                $line->get_type(),
                $line->get_line(),
                $line->get_destination());
  }

  print $table->title;
  print $table->rule("-");
  print $table->body;
}

sub set_date {
  my ($date_ref, $str) = @_;

  $str =~ /(\d\d?).(\d\d?).(\d\d\d\d)/;

  $$date_ref->set(day => $1, month => $2, year => $3);
}

sub set_time {
  my ($time_ref, $str) = @_;

  $str =~ /(\d\d?):(\d\d?)/;

  $$time_ref->set(hour => $1, minute => $2);
}

#------------------- Main ------------------------------------------------------

=head1 OPTIONS

=over 8

=item B<--dbfile> I<file>

Benutzt I<file> als Datenbank

=item B<--help>

Zeigt diese Hilfe an.

=back

=cut

sub main {
  my $dbfile = undef;

  GetOptions("dbfile=s" => \$dbfile,
             "help" => \&show_help);

  if (defined $dbfile) {
    init_db( url => "dbi:SQLite:dbname=$dbfile");
  } else {
    init_db();
  }

  my %commands = ( clear => \&clear_departures,
                   fetch => \&fetch_departures,
                   list => \&list_departures,
                   query => \&query_departures);

  my $command = shift @ARGV;

  if (defined $commands{$command}) {
    &{$commands{$command}}();
  } else {
    print "unbekanntes Kommando: $command\n";

    show_help();
  }

  close_db();
}

#------------------- Kommandos -------------------------------------------------

=pod

=head1 COMMANDS

=head2 clear

Löscht alle Abfahrten aus der lokalen Datenbank.

=cut
sub clear_departures {
  delete_departures();
}

=pod

=head2 fetch [OPTIONS] <id>

Lädt Abfahrten und speichert sie in der lokalen Datenbank.

=head3 Optionen

=over 8

=item B<--num> I<n>, B<-n> I<n>

Fragt I<n> Abfahrten ab.

=item B<--date> I<date>, B<-d> I<date>

Setzt das Datum für die Abfragen auf I<date>

=item B<--time> I<time>, B<-t> I<time>

Setzt die Zeit für die Abfragen auf I<time>

=back

=cut
sub fetch_departures {
  my $time = DateTime->now(time_zone => "local");
  my $num = 10;
  my @ids = ();

  GetOptions("num|n=i" => \$num,
             "<>" => sub { push @ids, $_[0] },
             "date|d=s" => sub { set_date(\$time, $_[1]) },
             "time|t=s" => sub { set_time(\$time, $_[1]) },
             "help" => \&show_help);

  # Abfahrten laden
  my @departures = ();

  foreach my $id (@ids) {
    push @departures, get_departures($id, time => $time, num => $num);
  }

  # noch nicht bekannte Abfahrten speichern
  my $count = 0;

  foreach my $departure (@departures) {
    if (!departure_is_persistent(\$departure)) {
      store_departure(\$departure);
      $count++;
    }
  }

  print "$count neue Abfahrten gespeichert\n";
}

=pod

=head2 list [OPTIONS]

Listet die nächsten Abfahren in der Lokalen Datenbank auf.

=head3 Optionen

=over 8

=item B<--num> I<n>, B<-n> I<n>

Gibt die Anzahl der anzuzeigenden Abfahren an.

=back

=cut
sub list_departures {
  my $num = 10;

  GetOptions("num|n=i" => \$num,
             "help" => \&show_help);

  my @departures = load_departures(after => DateTime->now(),
                                   num => $num);

  show_departures(@departures);
}

=pod

=head2 query [OPTIONS] <id>

ID der Station für die der die nächsten Abfahrten angezeigt werden sollen. Hier
kann auch eine Liste für mehrere Haltestellen angegeben werden.

=over 8
k
=back

=head3 Optionen

=over 8

=item B<--num> I<n>, B<-n> I<n>

Frage die nächsten I<n> Abfahrten ab

=item B<--date> I<date>, B<-d> I<date>

Setzt das Datum für die Abfrage auf das übergebene I<date>. Beispiel: "14.2.2012".

=item B<--time> I<time>, B<-t> I<time>

Setzt die Uhrzeit für die Abfrage. Beispiel: "03:14"

=cut
sub query_departures {
  my $num = 10;
  my $time = DateTime->now(time_zone => "local");
  my @ids = ();

  # Optionen verabeiten
  GetOptions("<>" => sub { push @ids, $_[0] },
             "num|n=i" => \$num,
             "date|d=s" => sub { set_date(\$time, $_[1]) },
             "time|t=s" => sub { set_time(\$time, $_[1]) },
             "help" => \&show_help);

  # Abfahrten laden
  my @departures = ();

  foreach my $id (@ids) {
    push @departures, get_departures($id, time => $time, num => $num);
  }

  # Abfahrten sortieren
  my @d = sort {$a->get_time <=> $b->get_time} @departures;

  my $end = min($num, scalar(@d)) - 1;

  if ($end >= 0) {
    show_departures(@d[0..$end]);
  } else {
    print "Es wurden keinen Abfahrten gefunden\n";
  }
}

__END__


