#!/usr/bin/perl

use EFA;
use Text::Table;
use Getopt::Long  qw(:config pass_through);
use Pod::Usage;
use EFA::DB;
use utf8;

binmode(STDOUT, ":utf8");

main();

=pod

=encoding utf8

=head1 NAME

B<efa-station> - Verwaltet Haltestellen

=head1 SYNOPSIS

=over 8

=item I<efa-station add> <id>

=item I<efa-station list>

=item I<efa-station rm> <id>

=item I<efa-station search> <name>

=back

=head1 COMMANDS

=head2 I<add> <id>

Fügt eine Haltestelle mit der ID <id> zur Datenbank hinzu

=cut
sub add_station {
  my @ids = ();

  GetOptions("<>" => sub { push @ids, $_[0] },
             "help" => \&show_help);

  foreach my $id (@ids) {
    my @stations = find_station($id);

    my $station = $stations[0];

    if ($station) {
      my $name = $station->get_name;
      my $id = $station->get_id;

      store_station(\$station);

      print "Haltestelle '$name' (id = $id) gespeichert\n";
    } else {
      print "keine Haltestellt mit der ID $id gefunden\n";
    }
  }
}

=pod

=head2 I<search> [--city <Stadt>] <name>

Sucht in der Datenbank von L<efa.de|http://efa.de> nach der Station mit dem Namen <name>

=head3 Optionen

=over 8

=item I<--city> <Stadt>

Bei der Suche die Stadt auf <Stadt> beschränken

=back

=cut
sub find_stations {
  my @queries = ();
  my @stations = ();
  my $city;

  # Optionen auswerten
  GetOptions("<>" => sub { push @queries, $_[0] },
             "city=s" => \$city,
             "help" => \&show_help);

  # Stationen suchen
  foreach my $query (@queries) {
    push @stations, find_station($query, city => $city);
  }

  # Ausgabe
  if (scalar(@stations) > 0) {
    printStations(@stations);
  } else {
    print "keine Stationen gefunden\n";
  }
}

=pod

=head2 I<list>

Listet alle Haltestellen in der Datenbank auf

=cut
sub list_stations {
  printStations(load_all_stations());
}

=pod

=head2 I<rm> <id>

Löscht eine Haltestelle aus der lokalen Datenbank

=cut
sub remove_station {
  my @ids = ();

  GetOptions("<>" => sub { push @ids, $_[0] },
             "help" => \&show_help);

  foreach my $id (@ids) {
    my $station = load_station_by_id($id);

    if (defined $station) {
      delete_station($id);

      my $name = $station->get_name();

      print "Haltestelle '$name' (id = $id) gelöscht\n";
    } else {
      print "Haltestelle mit der ID $id ist nicht in der Datenbank vorhanden\n";
    }
  }
}

sub main {
  my $dbfile = undef;

  GetOptions("dbfile=s" => \$dbfile,
             "help" => \&show_help);

  if ($dbfile eq undef) {
    init_db();
  } else {
    init_db( url => "dbi:SQLite:dbname=$dbfile");
  }

  my %commands = (add => \&add_station,
                  list => \&list_stations,
                  rm => \&remove_station,
                  search => \&find_stations);

  my $command = shift @ARGV;

  if (defined $commands{$command}) {
    &{$commands{$command}}();
  } else {
    print "unbekanntes Kommando: $command\n";

    show_help();
  }

  close_db();
}

sub printStations {
  my $table = Text::Table->new("Station", "ID");

  foreach $station (@_) {
    $table->add($station->get_name, $station->get_id);
  }

  print $table->title;
  print $table->rule("-");
  print $table->body;
}

sub show_help {
  pod2usage(verbose => 99,
            sections => [ qw(SYNOPSIS COMMANDS OPTIONS) ]);
}

__END__

=head1 OPTIONS

=over 8

=item B<--dbfile> I<file>

Benutzt I<file> als Datenbank

=item B<--help>

Zeigt diese Hilfe

  =back


